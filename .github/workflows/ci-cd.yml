# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

  # Image names
  IMAGE_MLFLOW: ${{ github.repository_owner }}/mlflow
  IMAGE_API: ${{ github.repository_owner }}/creditcard-api
  IMAGE_PROMETHEUS: ${{ github.repository_owner }}/prometheus
  IMAGE_GRAFANA: ${{ github.repository_owner }}/grafana

  # Default tag
  TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for images
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_MLFLOW }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_API }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PROMETHEUS }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_GRAFANA }}
          tags: |
            type=raw,value=${{ env.TAG }}
            type=sha,prefix=,format=short
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}

      # -------------------------------
      # Build and Push: MLflow Server
      # -------------------------------
      - name: Build and push MLflow image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.mlflow
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------------------------------
      # Build and Push: FastAPI App
      # -------------------------------
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------------------------------
      # Build and Push: Prometheus
      # -------------------------------
      - name: Build and push Prometheus image (custom config)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prometheus
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PROMETHEUS }}:${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      # -------------------------------
      # Build and Push: Grafana
      # -------------------------------
      - name: Build and push Grafana image (with dashboards)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.grafana
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_GRAFANA }}:${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  # =============================
  # Deploy to EC2 Instance
  # =============================
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on error

            cd /home/ubuntu/mlops_fraud2

            # Pull latest docker-compose.yml and config (optional)
            git pull origin main

            # Login to GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker compose pull

            # Bring up services
            docker compose up -d --remove-orphans

            echo "Deployment completed successfully!"